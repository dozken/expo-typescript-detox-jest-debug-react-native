jobs:
  ios_build_and_test:
    macos:
      xcode: "13.3.0"

    working_directory: ~/repo

    steps:
      - checkout

      # Set up environment
      - run: npm install -g yarn
      - run: yarn

      # - run: npm install -g detox-cli
      - run: brew tap wix/brew
      - run: brew install applesimutils
      - run: npx pod-install

      # run unit tests
      # - run: yarn install
      # - run: yarn test

      # run E2E tests
      - run: yarn build:ios-release
      - run: yarn test:ios-release
      - store_artifacts:
          path: /tmp/detox_artifacts

  android_build_and_test:
    macos:
      xcode: "13.3.0"

    working_directory: ~/repo

    steps:
      - checkout

      # Set up environment
      - run: npm install -g yarn
      - run: yarn

      - run:
          command: |
            java -version
            brew tap adoptopenjdk/openjdk
            brew install --cask adoptopenjdk/openjdk/adoptopenjdk8
            
            java -version
            
            export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
            
            mkdir -p ~/.android && touch ~/.android/repositories.cfg
            
            java -version
            
            yes | sdkmanager "platform-tools" "tools" >/dev/null
            yes | sdkmanager "platforms;android-29"
            
            "system-images;android-29;default;x86_64" >/dev/null
            yes | sdkmanager "emulator" --channel=3 >/dev/null
            yes | sdkmanager "build-tools;29.0.2" >/dev/null
            yes | sdkmanager --licenses >/dev/null
            yes | sdkmanager --list

          name: Install Android Emulator
          shell: /bin/bash -e
      - run:
          command: |
            adb start-server
            adb devices
            adb kill-server
            ls -la ~/.android
          name: ADB Start Stop
      - run:
          # Note we are using a pixel_xl as the test device, feel free to change it for one better fits your app
          command: |
            export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
            avdmanager create avd --force --name EMULATOR --package "system-images;android-29;default;x86_64" --tag default --device pixel_xl
          name: Create Android Emulator
      - run:
          background: true
          command: |
            export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
            $ANDROID_HOME/emulator/emulator @EMULATOR -version
            $ANDROID_HOME/emulator/emulator @EMULATOR -cores 2 -gpu auto
            -accel on -memory 2048 -no-audio -no-snapshot -no-boot-anim
            -no-window -logcat *:W | grep -i
            'ReactNative\|com.reactnativecommunity'
          name: Start Android EMULATOR (background)
      - run:
          command: >
            # export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
            export BOOT=""
            echo "Waiting for AVD to finish booting"
            export PATH=$(dirname $(dirname $(command -v
            android)))/platform-tools:$PATH
            until [[ "$BOOT" =~ "1" ]]; do
              sleep 5
              export BOOT=$(adb -e shell getprop sys.boot_completed 2>&1)
            done
            sleep 15
            adb shell settings put global window_animation_scale 0
            adb shell settings put global transition_animation_scale 0
            adb shell settings put global animator_duration_scale 0
            echo "Android Virtual Device is now ready."
          name: Wait for AVD to be ready
          no_output_timeout: 5m

      # run E2E tests
      - run: yarn build:android-release
      - run: yarn test:android-release

      - store_artifacts:
          path: /tmp/detox_artifacts

version: 2.1
workflows:
  test:
    jobs:
      - ios_build_and_test
      - android_build_and_test
